import logging
from datetime import datetime

from urllib import unquote

from django.core.exceptions import MultipleObjectsReturned
from django.http import Http404
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.shortcuts import render_to_response, get_object_or_404
from django.template import RequestContext
from django.utils.timezone import utc


from easyblog.models import Post, PostStatus, Tag

logger = logging.getLogger('easyblog.views') 

utc_date = datetime.now().replace(tzinfo=utc)

def index(request):    
    live_statuses = PostStatus.objects.filter(is_live=True)
    post_list = Post.objects.filter(publish_date__lte=utc_date.now(), status__in=live_statuses).order_by('-publish_date')
    paginator = Paginator(post_list, 3)
    
    page = request.GET.get('page')
    
    try:
        posts = paginator.page(page)
    except PageNotAnInteger:
        posts = paginator.page(1)
    except EmptyPage:
        posts = paginator.page(paginator.num_pages)
        
    return render_to_response('easyblog/posts/index.html',
                              {'posts': posts},
                              context_instance=RequestContext(request))
    

def post_detail(request, year, month, day, slug):
    try:
        live_statuses = PostStatus.objects.filter(is_live=True)
        post = get_object_or_404(Post, slug__exact=slug,
                                 publish_date__year=year,
                                 publish_date__month=month,
                                 publish_date__day=day,
                                 publish_date__lte=utc_date,
                                 status__in=live_statuses)
        return render_to_response('easyblog/posts/detail.html',
                              {'post': post},
                              context_instance=RequestContext(request))
    except MultipleObjectsReturned:
        logger.error('More than one object found for /%u/%u/%u/%s' % (year, month, day, slug))
        raise Http404
    
def author_detail(request, author):
    pass
    
    
    
def tag_search(request, tags):
    # URL decode the tag
    logger.debug("Received the following tag parameter: %s" % tags)
    tags = unquote(tags)
    logger.debug("Unencoded parameter: %s" % tags)
    tags = tags.split('+')
    logger.debug("Split list: %s" % ", ".join(tags))
    
    tag_models = Tag.objects.filter(name__in=tags).filter(publish_date__lte=utc_date.now())

    #tag = get_object_or_404(Tag, name__exact=tag_name)
    live_statuses = PostStatus.objects.filter(is_live=True)
    tagged_posts_list = Post.objects.filter(tags = tag_models, status__in=live_statuses, publish_date__lte=utc_date.now())
    paginator = Paginator(tagged_posts_list, 3)
        
    page = request.GET.get('page')
    
    try:
        posts = paginator.page(page)
    except PageNotAnInteger:
        posts = paginator.page(1)
    except EmptyPage:
        posts = paginator.page(paginator.num_pages)
        
    return render_to_response('easyblog/posts/tagged.html',
                              {'posts': posts,
                               'tags' : tags},
                              context_instance=RequestContext(request))
    
    